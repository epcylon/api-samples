syntax = "proto3";
package stealth;
option csharp_namespace = "QuantGate.API.Signals.Proto.Stealth";

/* The type of instrument being traded. */
enum InstrumentType
{
    NoInstrument = 0;                            // Not a valid instrument.
    CommonStock = 1;                             // Common stock.
    StockOption = 2;                             // Stock option.
    Future = 3;                                  // Future.
    Index = 4;                                   // Index.
    ForexContract = 5;                           // Foreign Exchange (Currency).
    FutureOption = 6;                            // Future option.
    FutureInstrument = 7;                        // Future instrument (underlying).
    Combo = 8;                                   // Combo pairing.
    ComboInstrument = 9;                         // Combo underlying.
    CryptoCurrency = 10;                         // Crypto Currency (Bitcoin, etc.)
    PerpetualCrypto = 11;                        // Perpetual Crypto Currency.
}

/* The Put/Call side ("right") of an option. */
enum PutOrCall
{
    NoPutCall = 0;                               // Instrument is not an option.
    Put = 1;                                     // Put Option (option to sell at strike).
    Call = 2;                                    // Call Option (option to buy at strike).
}

/* Entry/Exit signal state for strategies. */
enum StrategySignal
{
    None = 0;                                    // No current signal.
    LongSignal = 1;                              // Signal to enter a long position.
    ShortSignal = 2;                             // Signal to enter a short position.
}

/* Gauge signal state for strategies (PCES lights). */
enum GaugeSignal
{
    Unknown = 0;                                 // Unknown signal (gauge signal not set - use default).
    Short = 1;                                   // Signal to enter a short position.
    Flat = 2;                                    // No current signal.
    Long = 3;                                    // Signal to enter a long position.
    Dual = 4;                                    // Dual signal (long or short - no specific direction).
}

/* RealtimeUpdate represents an update of real-time quote updates (bid/ask/last). */
message RealtimeUpdate
{
    uint64 ask_price = 1;                        // Current inside ask price for this instrument.
    uint64 ask_size = 2;                         // Current inside ask size for this instrument.
    uint64 bid_price = 3;                        // Current inside bid price for this instrument.
    uint64 bid_size = 4;                         // Current inside bid size for this instrument.
    uint64 last_price = 5;                       // The last trade price for this instrument.
    uint64 last_size = 6;                        // Size of the last trade of this instrument.
}

/* SnapshotUpdate represents an update of snapshot information (trading session and yearly) */
message SnapshotUpdate
{
    uint64 open_price = 1;                       // The open value of the current trading day.
    uint64 high_price = 2;                       // The high value of the current trading day.
    uint64 low_price = 3;                        // The low value of the current trading day.
    uint64 close_price = 4;                      // The close value of the current trading day.
    uint64 previous_close = 5;                   // Previous close value of current trading day.
    uint64 volume = 6;                           // The daily trading volume for this instrument.
    uint64 high52_price = 7;                     // The 52-week high value for this instrument.
    uint64 low52_price = 8;                      // The 52-week low value for this instrument.
}

/* StatisticsUpdate represents an update of statistics related to the underlying instrument. */
message StatisticsUpdate
{
    float beta = 1;                              // The beta value for this instrument.
    float eps = 2;                               // The earnings per share for this instrument.
    float pe_ratio = 3;                          // Profit/earnings ratio for this instrument.
    uint64 shares_outstanding = 4;               // The shares outstanding for this instrument.
    float historical_volatility = 5;             // The historical volatility for this instrument.
    float implied_volatility = 6;                // The implied volatility for this instrument.
}

/* QuoteUpdate represents a new real-time market data quote update.
 * All prices are converted to long values. */
message QuoteUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    RealtimeUpdate realtime = 2;                 // Real-time quote updates (bid/ask/last).
    SnapshotUpdate snapshot = 3;                 // Trading session and yearly statistics snapshot.
    StatisticsUpdate statistics = 4;             // Statistics related to the underlying instrument.
}

/* Holds the spline information for a sentiment length or color spline.
 * Values should be converted to between -1 and 1 by dividing by 1000. */
message SentimentSpline
{
    sint32 average = 1;                          // Average length. (-1000 to 1000)
    uint32 i = 2;                                // First spline point.
    uint32 j = 3;                                // Second spline point.
    sint32 x = 4;                                // Position at point 0. (-1000 to 1000)
    sint32 y = 5;                                // Position at point i. (-1000 to 1000)
    sint32 z = 6;                                // Position at point j. (-1000 to 1000)
}

/* SentimentUpdate represents a new sentiment subscription update. */
message SentimentUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    SentimentSpline lengths = 2;                 // Bar color spline component of sentiment gauge.
    SentimentSpline colors = 3;                  // Bar length component of sentiment gauge.
    bool is_dirty = 4;                           // Is the data that generated this potentially dirty (or stale)?
}

/* EquilibriumUpdate represents a new equilibrium subscription update.
 * All prices (and gap size) are converted to long values.
 * Values should be converted to between -1 and 1 by dividing by 1000. */
message EquilibriumUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    uint64 equilibrium_price = 2;                // The equilibrium price.
    uint64 gap_size = 3;                         // The gap size of each equilibrium deviation.
    sint32 high = 4;                             // The position of the high value. (-1000 to 1000)
    sint32 low = 5;                              // The position of the low value. (-1000 to 1000)
    sint32 projected = 6;                        // Position of the projected value. (-1000 to 1000)
    sint32 bias = 7;                             // The bias (determined by the slope, -1000 to 1000).
    uint64 last_price = 8;                       // Last traded price at time of calculation.
    bool is_dirty = 9;                           // Is the data that generated this potentially dirty (or stale)?
}

/* MultiframeUpdate represents a new multi-timeframe equilibrium subscription update. 
 * Values should be converted to between -1 and 1 by dividing by 1000. */
message MultiframeUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    sint32 min_5 = 2;                            // The 5 minute value. (-1000 to 1000)
    sint32 min_10 = 3;                           // The 10 minute value. (-1000 to 1000)
    sint32 min_15 = 4;                           // The 15 minute value. (-1000 to 1000)
    sint32 min_30 = 5;                           // The 30 minute value. (-1000 to 1000)
    sint32 min_45 = 6;                           // The 45 minute value. (-1000 to 1000)
    sint32 min_60 = 7;                           // The 60 minute value. (-1000 to 1000)
    sint32 min_120 = 8;                          // The 120 minute value. (-1000 to 1000)
    sint32 min_180 = 9;                          // The 180 minute value. (-1000 to 1000)
    sint32 min_240 = 10;                         // The 240 minute value. (-1000 to 1000)
    sint32 day_1 = 11;                           // The 1 day value. (-1000 to 1000)
    bool is_dirty = 12;                          // Is the data that generated this potentially dirty (or stale)?
}

/* TriggerUpdate represents a new trigger subscription update. 
 * All prices (and gap size) are converted to long values.
 * Values should be converted to between -1 and 1 by subtracting 1001 and dividing by 1000. */
message TriggerUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    sint32 bias = 2;                             // The bias value. (-1000 to 1000)
    sint32 perception = 3;                       // The perception value. (-1000 to 1000)
    sint32 sentiment = 4;                        // Sentiment length value at point 0. (-1000 to 1000)
    sint32 commitment = 5;                       // The commitment value. (-1000 to 1000)
    uint64 equilibrium_price = 6;                // The equilibrium price.
    uint64 gap_size = 7;                         // The gap size of each equilibrium deviation.
    uint64 last_price = 8;                       // Last traded price at time of calculation.
    bool is_dirty = 9;                           // Is the data that generated this potentially dirty (or stale)?
}

/* SingleValueUpdate represents a new subscription update for a gauge that returns a single
 * value (such as Perception, Commitment, Headroom, Book Pressure, or SMA).
 * Values should be converted to between -1 and 1 by dividing by 1000. */
message SingleValueUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    sint32 value = 2;                            // The single value. (-1000 to 1000)
    bool is_dirty = 3;                           // Is the data that generated this potentially dirty (or stale)?
}

/* StrategyUpdate represents a new subscription update for a subscribed strategy. */
message StrategyUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    sint32 entry_progress = 2;                   // The entry progress value. (-1000 to 1000)
    sint32 exit_progress = 3;                    // The exit progress value. (-1000 to 1000)
    StrategySignal signal = 4;                   // The entry signal for the strategy.

    uint32 perception_level = 5;                 // The perception level ( 0=unset, else value=(x-1001)/1000 )
    GaugeSignal perception_signal = 6;           // The signal tied to the perception level.
    uint32 commitment_level = 7;                 // The commitment level ( 0=unset, else value=(x-1001)/1000 )
    GaugeSignal commitment_signal = 8;           // The signal tied to the commitment level.
    GaugeSignal sentiment_signal = 9;            // The signal tied to the 50t sentiment indication.
    GaugeSignal equilibrium_signal = 10;         // The signal tied to the equilibrium level.
    uint32 sentiment_level = 11;                 // The normalized sentiment level ( 0=unset, else value=(x-1001)/1000 )
    uint32 equilibrium_level = 12;               // The normalized equilibrium level ( 0=unset, else value=(x-1001)/1000 )
}

/* SinglePriceUpdate represents a new subscription update for a guage that returns a single 
 * price result (such as Simple Moving Average).
 * All prices are converted to long values, empty values will be decoded as NaN. */
message SinglePriceUpdate
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    uint64 value = 2;                            // The single price value.
    bool is_dirty = 3;                           // Is the data that generated this potentially dirty (or stale)?
}

/* Holds a single tick range for an Instrument definition. */
message TickValue
{
    // Types of tick formats available to display prices in.
    enum TickFormat
    {
        /* Decimal display (regular 0.000, etc.) */
        Decimal = 0;
        /* Fractional format, such as 34 1/4.
         * In this case, the denominator that will be used for non-integer portions of the
         * number will be that supplied with the format. Note, that the fraction is generally 
         * displayed in its simplified format (divide numerator and denominator by GCD). */
        Fraction = 1;
        /* Tick format, such as 34'120.
         * In this case, the value after the tick is the non-integer portion of the number,
         * multiplied by the denominator value supplied, zero padded to the left to fit the
         * number of digits required to display the denominator value as a full integer. */
        Tick = 2;
    }

    double start = 1;                            // The start of the tick range.
    double tick = 2;                             // The tick value at this range.
    uint32 denominator = 3;                      // Denominator for fractional formats.
    sint32 decimals = 4;                         // Number of decimals in decimal format.
    TickFormat format = 5;                       // Format to use (Decimal/Fraction/Tick).
}

/* Holds information about the current trading session for an instrument. */
message TradingSession
{
    sint32 close = 1;                            // The close time of the trading session in minutes from midnight.
    sint32 length = 2;                           // The length of the trading session in minutes from midnight.
}

/* Holds the details of a trading instrument. */
message InstrumentUpdate
{    
    string symbol = 1;                           // The symbol as listed by our servers.
    string underlying = 2;                       // The underlying symbol.
    string currency = 3;                         // The currency the instrument is traded in.
    string exchange = 4;                         // The exchange that the instrument is listed on.
    InstrumentType instrument_type = 5;          // The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
    PutOrCall put_or_call = 6;                   // "Right" of an option, if an option (empty otherwise).
    double strike = 7;                           // Strike price of an option, if an option (zero otherwise).
    uint64 expiry_date = 8;                      // The expiry date of the instrument, if applicable (days from Jan 1, 1800).
    double multiplier = 9;                       // The price multiplier.
    string display_name = 10;                    // The display name of the instrument.
    string time_zone = 11;                       // The time zone of the primary exchange the instrument is traded on.

    repeated TickValue tick_values = 12;         // The tick values used to determine price levels.
    repeated TradingSession trading_sessions = 13;// The trading session end times and lengths for each day Sun-Sat.
    map<string, string> broker_symbols = 14;     // Map of broker symbols according to broker (ib, cqg, dtniq, etc.).
}

/* Holds basic information for an individual symbol within a symbol search result. */
message SymbolSearchResult
{
    string symbol = 1;                           // The symbol as listed by our servers.
    string underlying = 2;                       // The underlying symbol.
    string currency = 3;                         // The currency the instrument is traded in.
    InstrumentType instrument_type = 4;          // The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
    string exchange = 5;                         // The primary exchange (MIC) the instrument is traded on.
    string display_name = 6;                     // The display name of the instrument.
}

/* Holds the results of a symbol search request within a symbol search subscription.
 * Note: The user must subscribe to a definition/search subscription to get results 
 *       and make specific requests using a definition/search/{term} send message. */
message SymbolSearchUpdate
{
    string search_term = 1;                      // The search term the results are for.
    repeated SymbolSearchResult results = 2;     // The search results.
}

/* Holds basic information for an individual symbol within a top symbols update. */
message TopSymbolItem
{
    uint64 timestamp = 1;                        // The timestamp of the latest update.
    string symbol = 2;                           // The symbol as listed by our servers.
    string underlying = 3;                       // The underlying symbol.
    string currency = 4;                         // The currency the instrument is traded in.
    InstrumentType instrument_type = 5;          // The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
    string exchange = 6;                         // The primary exchange (MIC) the instrument is traded on.
    string display_name = 7;                     // The display name of the instrument.
    sint32 entry_progress = 8;                   // The entry progress value. (-1000 to 1000)
    StrategySignal signal = 9;                   // The entry signal for the strategy.
    GaugeSignal perception_signal = 10;          // The signal tied to the perception level.
    GaugeSignal commitment_signal = 11;          // The signal tied to the commitment level.
    GaugeSignal sentiment_signal = 12;           // The signal tied to the 50t sentiment indication.
    GaugeSignal equilibrium_signal = 13;         // The signal tied to the equilibrium level.    
}

/* Holds an update of the current top items of a top symbols subscription. */
message TopSymbolsUpdate
{
    repeated TopSymbolItem symbols = 1;          // The top symbol results;
}

/* Holds a single security definition or list definition as a string. */
message SingleDefinitionUpdate
{
    string definition = 1;                       // The simple definition.
}