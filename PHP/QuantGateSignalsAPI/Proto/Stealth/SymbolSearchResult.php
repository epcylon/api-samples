<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stealth-api-v2.0.proto

namespace Stealth;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Holds basic information for an individual symbol within a symbol search result. 
 *
 * Generated from protobuf message <code>stealth.SymbolSearchResult</code>
 */
class SymbolSearchResult extends \Google\Protobuf\Internal\Message
{
    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 1;</code>
     */
    private $symbol = '';
    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 2;</code>
     */
    private $underlying = '';
    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 3;</code>
     */
    private $currency = '';
    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 4;</code>
     */
    private $instrument_type = 0;
    /**
     * The primary exchange (MIC) the instrument is traded on.
     *
     * Generated from protobuf field <code>string exchange = 5;</code>
     */
    private $exchange = '';
    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 6;</code>
     */
    private $display_name = '';

    public function __construct() {
        \GPBMetadata\StealthApiV20::initOnce();
        parent::__construct();
    }

    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 1;</code>
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }

    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSymbol($var)
    {
        GPBUtil::checkString($var, True);
        $this->symbol = $var;

        return $this;
    }

    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 2;</code>
     * @return string
     */
    public function getUnderlying()
    {
        return $this->underlying;
    }

    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setUnderlying($var)
    {
        GPBUtil::checkString($var, True);
        $this->underlying = $var;

        return $this;
    }

    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 3;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 4;</code>
     * @return int
     */
    public function getInstrumentType()
    {
        return $this->instrument_type;
    }

    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setInstrumentType($var)
    {
        GPBUtil::checkEnum($var, \Stealth\InstrumentType::class);
        $this->instrument_type = $var;

        return $this;
    }

    /**
     * The primary exchange (MIC) the instrument is traded on.
     *
     * Generated from protobuf field <code>string exchange = 5;</code>
     * @return string
     */
    public function getExchange()
    {
        return $this->exchange;
    }

    /**
     * The primary exchange (MIC) the instrument is traded on.
     *
     * Generated from protobuf field <code>string exchange = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setExchange($var)
    {
        GPBUtil::checkString($var, True);
        $this->exchange = $var;

        return $this;
    }

    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 6;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

}

