<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stealth-api-v2.0.proto

namespace Stealth;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Holds basic information for an individual symbol within a top symbols update. 
 *
 * Generated from protobuf message <code>stealth.TopSymbolItem</code>
 */
class TopSymbolItem extends \Google\Protobuf\Internal\Message
{
    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     */
    private $timestamp = 0;
    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     */
    private $symbol = '';
    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 3;</code>
     */
    private $underlying = '';
    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 4;</code>
     */
    private $currency = '';
    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 5;</code>
     */
    private $instrument_type = 0;
    /**
     * The primary exchange (MIC) the instrument is traded on.
     *
     * Generated from protobuf field <code>string exchange = 6;</code>
     */
    private $exchange = '';
    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 7;</code>
     */
    private $display_name = '';
    /**
     * The entry progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 entry_progress = 8;</code>
     */
    private $entry_progress = 0;
    /**
     * The entry signal for the strategy.
     *
     * Generated from protobuf field <code>.stealth.StrategySignal signal = 9;</code>
     */
    private $signal = 0;
    /**
     * The signal tied to the perception level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal perception_signal = 10;</code>
     */
    private $perception_signal = 0;
    /**
     * The signal tied to the commitment level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal commitment_signal = 11;</code>
     */
    private $commitment_signal = 0;
    /**
     * The signal tied to the 50t sentiment indication.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal sentiment_signal = 12;</code>
     */
    private $sentiment_signal = 0;
    /**
     * The signal tied to the equilibrium level.    
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal equilibrium_signal = 13;</code>
     */
    private $equilibrium_signal = 0;

    public function __construct() {
        \GPBMetadata\StealthApiV20::initOnce();
        parent::__construct();
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }

    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSymbol($var)
    {
        GPBUtil::checkString($var, True);
        $this->symbol = $var;

        return $this;
    }

    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 3;</code>
     * @return string
     */
    public function getUnderlying()
    {
        return $this->underlying;
    }

    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setUnderlying($var)
    {
        GPBUtil::checkString($var, True);
        $this->underlying = $var;

        return $this;
    }

    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 4;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 5;</code>
     * @return int
     */
    public function getInstrumentType()
    {
        return $this->instrument_type;
    }

    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setInstrumentType($var)
    {
        GPBUtil::checkEnum($var, \Stealth\InstrumentType::class);
        $this->instrument_type = $var;

        return $this;
    }

    /**
     * The primary exchange (MIC) the instrument is traded on.
     *
     * Generated from protobuf field <code>string exchange = 6;</code>
     * @return string
     */
    public function getExchange()
    {
        return $this->exchange;
    }

    /**
     * The primary exchange (MIC) the instrument is traded on.
     *
     * Generated from protobuf field <code>string exchange = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setExchange($var)
    {
        GPBUtil::checkString($var, True);
        $this->exchange = $var;

        return $this;
    }

    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 7;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * The entry progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 entry_progress = 8;</code>
     * @return int
     */
    public function getEntryProgress()
    {
        return $this->entry_progress;
    }

    /**
     * The entry progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 entry_progress = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setEntryProgress($var)
    {
        GPBUtil::checkInt32($var);
        $this->entry_progress = $var;

        return $this;
    }

    /**
     * The entry signal for the strategy.
     *
     * Generated from protobuf field <code>.stealth.StrategySignal signal = 9;</code>
     * @return int
     */
    public function getSignal()
    {
        return $this->signal;
    }

    /**
     * The entry signal for the strategy.
     *
     * Generated from protobuf field <code>.stealth.StrategySignal signal = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\StrategySignal::class);
        $this->signal = $var;

        return $this;
    }

    /**
     * The signal tied to the perception level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal perception_signal = 10;</code>
     * @return int
     */
    public function getPerceptionSignal()
    {
        return $this->perception_signal;
    }

    /**
     * The signal tied to the perception level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal perception_signal = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setPerceptionSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->perception_signal = $var;

        return $this;
    }

    /**
     * The signal tied to the commitment level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal commitment_signal = 11;</code>
     * @return int
     */
    public function getCommitmentSignal()
    {
        return $this->commitment_signal;
    }

    /**
     * The signal tied to the commitment level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal commitment_signal = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setCommitmentSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->commitment_signal = $var;

        return $this;
    }

    /**
     * The signal tied to the 50t sentiment indication.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal sentiment_signal = 12;</code>
     * @return int
     */
    public function getSentimentSignal()
    {
        return $this->sentiment_signal;
    }

    /**
     * The signal tied to the 50t sentiment indication.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal sentiment_signal = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setSentimentSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->sentiment_signal = $var;

        return $this;
    }

    /**
     * The signal tied to the equilibrium level.    
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal equilibrium_signal = 13;</code>
     * @return int
     */
    public function getEquilibriumSignal()
    {
        return $this->equilibrium_signal;
    }

    /**
     * The signal tied to the equilibrium level.    
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal equilibrium_signal = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setEquilibriumSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->equilibrium_signal = $var;

        return $this;
    }

}

