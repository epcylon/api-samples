<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stealth-api-v2.0.proto

namespace Stealth;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * StrategyUpdate represents a new subscription update for a subscribed strategy. 
 *
 * Generated from protobuf message <code>stealth.StrategyUpdate</code>
 */
class StrategyUpdate extends \Google\Protobuf\Internal\Message
{
    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     */
    private $timestamp = 0;
    /**
     * The entry progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 entry_progress = 2;</code>
     */
    private $entry_progress = 0;
    /**
     * The exit progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 exit_progress = 3;</code>
     */
    private $exit_progress = 0;
    /**
     * The entry signal for the strategy.
     *
     * Generated from protobuf field <code>.stealth.StrategySignal signal = 4;</code>
     */
    private $signal = 0;
    /**
     * The perception level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 perception_level = 5;</code>
     */
    private $perception_level = 0;
    /**
     * The signal tied to the perception level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal perception_signal = 6;</code>
     */
    private $perception_signal = 0;
    /**
     * The commitment level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 commitment_level = 7;</code>
     */
    private $commitment_level = 0;
    /**
     * The signal tied to the commitment level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal commitment_signal = 8;</code>
     */
    private $commitment_signal = 0;
    /**
     * The signal tied to the 50t sentiment indication.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal sentiment_signal = 9;</code>
     */
    private $sentiment_signal = 0;
    /**
     * The signal tied to the equilibrium level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal equilibrium_signal = 10;</code>
     */
    private $equilibrium_signal = 0;
    /**
     * The normalized sentiment level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 sentiment_level = 11;</code>
     */
    private $sentiment_level = 0;
    /**
     * The normalized equilibrium level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 equilibrium_level = 12;</code>
     */
    private $equilibrium_level = 0;

    public function __construct() {
        \GPBMetadata\StealthApiV20::initOnce();
        parent::__construct();
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * The entry progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 entry_progress = 2;</code>
     * @return int
     */
    public function getEntryProgress()
    {
        return $this->entry_progress;
    }

    /**
     * The entry progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 entry_progress = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setEntryProgress($var)
    {
        GPBUtil::checkInt32($var);
        $this->entry_progress = $var;

        return $this;
    }

    /**
     * The exit progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 exit_progress = 3;</code>
     * @return int
     */
    public function getExitProgress()
    {
        return $this->exit_progress;
    }

    /**
     * The exit progress value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 exit_progress = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setExitProgress($var)
    {
        GPBUtil::checkInt32($var);
        $this->exit_progress = $var;

        return $this;
    }

    /**
     * The entry signal for the strategy.
     *
     * Generated from protobuf field <code>.stealth.StrategySignal signal = 4;</code>
     * @return int
     */
    public function getSignal()
    {
        return $this->signal;
    }

    /**
     * The entry signal for the strategy.
     *
     * Generated from protobuf field <code>.stealth.StrategySignal signal = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\StrategySignal::class);
        $this->signal = $var;

        return $this;
    }

    /**
     * The perception level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 perception_level = 5;</code>
     * @return int
     */
    public function getPerceptionLevel()
    {
        return $this->perception_level;
    }

    /**
     * The perception level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 perception_level = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setPerceptionLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->perception_level = $var;

        return $this;
    }

    /**
     * The signal tied to the perception level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal perception_signal = 6;</code>
     * @return int
     */
    public function getPerceptionSignal()
    {
        return $this->perception_signal;
    }

    /**
     * The signal tied to the perception level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal perception_signal = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setPerceptionSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->perception_signal = $var;

        return $this;
    }

    /**
     * The commitment level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 commitment_level = 7;</code>
     * @return int
     */
    public function getCommitmentLevel()
    {
        return $this->commitment_level;
    }

    /**
     * The commitment level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 commitment_level = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setCommitmentLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->commitment_level = $var;

        return $this;
    }

    /**
     * The signal tied to the commitment level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal commitment_signal = 8;</code>
     * @return int
     */
    public function getCommitmentSignal()
    {
        return $this->commitment_signal;
    }

    /**
     * The signal tied to the commitment level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal commitment_signal = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setCommitmentSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->commitment_signal = $var;

        return $this;
    }

    /**
     * The signal tied to the 50t sentiment indication.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal sentiment_signal = 9;</code>
     * @return int
     */
    public function getSentimentSignal()
    {
        return $this->sentiment_signal;
    }

    /**
     * The signal tied to the 50t sentiment indication.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal sentiment_signal = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setSentimentSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->sentiment_signal = $var;

        return $this;
    }

    /**
     * The signal tied to the equilibrium level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal equilibrium_signal = 10;</code>
     * @return int
     */
    public function getEquilibriumSignal()
    {
        return $this->equilibrium_signal;
    }

    /**
     * The signal tied to the equilibrium level.
     *
     * Generated from protobuf field <code>.stealth.GaugeSignal equilibrium_signal = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setEquilibriumSignal($var)
    {
        GPBUtil::checkEnum($var, \Stealth\GaugeSignal::class);
        $this->equilibrium_signal = $var;

        return $this;
    }

    /**
     * The normalized sentiment level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 sentiment_level = 11;</code>
     * @return int
     */
    public function getSentimentLevel()
    {
        return $this->sentiment_level;
    }

    /**
     * The normalized sentiment level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 sentiment_level = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setSentimentLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->sentiment_level = $var;

        return $this;
    }

    /**
     * The normalized equilibrium level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 equilibrium_level = 12;</code>
     * @return int
     */
    public function getEquilibriumLevel()
    {
        return $this->equilibrium_level;
    }

    /**
     * The normalized equilibrium level ( 0=unset, else value=(x-1001)/1000 )
     *
     * Generated from protobuf field <code>uint32 equilibrium_level = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setEquilibriumLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->equilibrium_level = $var;

        return $this;
    }

}

