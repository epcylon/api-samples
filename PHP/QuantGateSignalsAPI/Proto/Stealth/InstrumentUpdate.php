<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stealth-api-v2.0.proto

namespace Stealth;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Holds the details of a trading instrument. 
 *
 * Generated from protobuf message <code>stealth.InstrumentUpdate</code>
 */
class InstrumentUpdate extends \Google\Protobuf\Internal\Message
{
    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 1;</code>
     */
    private $symbol = '';
    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 2;</code>
     */
    private $underlying = '';
    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 3;</code>
     */
    private $currency = '';
    /**
     * The exchange that the instrument is listed on.
     *
     * Generated from protobuf field <code>string exchange = 4;</code>
     */
    private $exchange = '';
    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 5;</code>
     */
    private $instrument_type = 0;
    /**
     * "Right" of an option, if an option (empty otherwise).
     *
     * Generated from protobuf field <code>.stealth.PutOrCall put_or_call = 6;</code>
     */
    private $put_or_call = 0;
    /**
     * Strike price of an option, if an option (zero otherwise).
     *
     * Generated from protobuf field <code>double strike = 7;</code>
     */
    private $strike = 0.0;
    /**
     * The expiry date of the instrument, if applicable (days from Jan 1, 1800).
     *
     * Generated from protobuf field <code>uint64 expiry_date = 8;</code>
     */
    private $expiry_date = 0;
    /**
     * The price multiplier.
     *
     * Generated from protobuf field <code>double multiplier = 9;</code>
     */
    private $multiplier = 0.0;
    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 10;</code>
     */
    private $display_name = '';
    /**
     * The time zone of the primary exchange the instrument is traded on.
     *
     * Generated from protobuf field <code>string time_zone = 11;</code>
     */
    private $time_zone = '';
    /**
     * The tick values used to determine price levels.
     *
     * Generated from protobuf field <code>repeated .stealth.TickValue tick_values = 12;</code>
     */
    private $tick_values;
    /**
     * The trading session end times and lengths for each day Sun-Sat.
     *
     * Generated from protobuf field <code>repeated .stealth.TradingSession trading_sessions = 13;</code>
     */
    private $trading_sessions;
    /**
     * Map of broker symbols according to broker (ib, cqg, dtniq, etc.).
     *
     * Generated from protobuf field <code>map<string, string> broker_symbols = 14;</code>
     */
    private $broker_symbols;

    public function __construct() {
        \GPBMetadata\StealthApiV20::initOnce();
        parent::__construct();
    }

    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 1;</code>
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }

    /**
     * The symbol as listed by our servers.
     *
     * Generated from protobuf field <code>string symbol = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSymbol($var)
    {
        GPBUtil::checkString($var, True);
        $this->symbol = $var;

        return $this;
    }

    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 2;</code>
     * @return string
     */
    public function getUnderlying()
    {
        return $this->underlying;
    }

    /**
     * The underlying symbol.
     *
     * Generated from protobuf field <code>string underlying = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setUnderlying($var)
    {
        GPBUtil::checkString($var, True);
        $this->underlying = $var;

        return $this;
    }

    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 3;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * The currency the instrument is traded in.
     *
     * Generated from protobuf field <code>string currency = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     * The exchange that the instrument is listed on.
     *
     * Generated from protobuf field <code>string exchange = 4;</code>
     * @return string
     */
    public function getExchange()
    {
        return $this->exchange;
    }

    /**
     * The exchange that the instrument is listed on.
     *
     * Generated from protobuf field <code>string exchange = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setExchange($var)
    {
        GPBUtil::checkString($var, True);
        $this->exchange = $var;

        return $this;
    }

    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 5;</code>
     * @return int
     */
    public function getInstrumentType()
    {
        return $this->instrument_type;
    }

    /**
     * The type of instrument (CS, FUT, IDX, FX, CRY, etc.).
     *
     * Generated from protobuf field <code>.stealth.InstrumentType instrument_type = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setInstrumentType($var)
    {
        GPBUtil::checkEnum($var, \Stealth\InstrumentType::class);
        $this->instrument_type = $var;

        return $this;
    }

    /**
     * "Right" of an option, if an option (empty otherwise).
     *
     * Generated from protobuf field <code>.stealth.PutOrCall put_or_call = 6;</code>
     * @return int
     */
    public function getPutOrCall()
    {
        return $this->put_or_call;
    }

    /**
     * "Right" of an option, if an option (empty otherwise).
     *
     * Generated from protobuf field <code>.stealth.PutOrCall put_or_call = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setPutOrCall($var)
    {
        GPBUtil::checkEnum($var, \Stealth\PutOrCall::class);
        $this->put_or_call = $var;

        return $this;
    }

    /**
     * Strike price of an option, if an option (zero otherwise).
     *
     * Generated from protobuf field <code>double strike = 7;</code>
     * @return float
     */
    public function getStrike()
    {
        return $this->strike;
    }

    /**
     * Strike price of an option, if an option (zero otherwise).
     *
     * Generated from protobuf field <code>double strike = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setStrike($var)
    {
        GPBUtil::checkDouble($var);
        $this->strike = $var;

        return $this;
    }

    /**
     * The expiry date of the instrument, if applicable (days from Jan 1, 1800).
     *
     * Generated from protobuf field <code>uint64 expiry_date = 8;</code>
     * @return int|string
     */
    public function getExpiryDate()
    {
        return $this->expiry_date;
    }

    /**
     * The expiry date of the instrument, if applicable (days from Jan 1, 1800).
     *
     * Generated from protobuf field <code>uint64 expiry_date = 8;</code>
     * @param int|string $var
     * @return $this
     */
    public function setExpiryDate($var)
    {
        GPBUtil::checkUint64($var);
        $this->expiry_date = $var;

        return $this;
    }

    /**
     * The price multiplier.
     *
     * Generated from protobuf field <code>double multiplier = 9;</code>
     * @return float
     */
    public function getMultiplier()
    {
        return $this->multiplier;
    }

    /**
     * The price multiplier.
     *
     * Generated from protobuf field <code>double multiplier = 9;</code>
     * @param float $var
     * @return $this
     */
    public function setMultiplier($var)
    {
        GPBUtil::checkDouble($var);
        $this->multiplier = $var;

        return $this;
    }

    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 10;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * The display name of the instrument.
     *
     * Generated from protobuf field <code>string display_name = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * The time zone of the primary exchange the instrument is traded on.
     *
     * Generated from protobuf field <code>string time_zone = 11;</code>
     * @return string
     */
    public function getTimeZone()
    {
        return $this->time_zone;
    }

    /**
     * The time zone of the primary exchange the instrument is traded on.
     *
     * Generated from protobuf field <code>string time_zone = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setTimeZone($var)
    {
        GPBUtil::checkString($var, True);
        $this->time_zone = $var;

        return $this;
    }

    /**
     * The tick values used to determine price levels.
     *
     * Generated from protobuf field <code>repeated .stealth.TickValue tick_values = 12;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTickValues()
    {
        return $this->tick_values;
    }

    /**
     * The tick values used to determine price levels.
     *
     * Generated from protobuf field <code>repeated .stealth.TickValue tick_values = 12;</code>
     * @param \Stealth\TickValue[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTickValues($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Stealth\TickValue::class);
        $this->tick_values = $arr;

        return $this;
    }

    /**
     * The trading session end times and lengths for each day Sun-Sat.
     *
     * Generated from protobuf field <code>repeated .stealth.TradingSession trading_sessions = 13;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTradingSessions()
    {
        return $this->trading_sessions;
    }

    /**
     * The trading session end times and lengths for each day Sun-Sat.
     *
     * Generated from protobuf field <code>repeated .stealth.TradingSession trading_sessions = 13;</code>
     * @param \Stealth\TradingSession[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTradingSessions($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Stealth\TradingSession::class);
        $this->trading_sessions = $arr;

        return $this;
    }

    /**
     * Map of broker symbols according to broker (ib, cqg, dtniq, etc.).
     *
     * Generated from protobuf field <code>map<string, string> broker_symbols = 14;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getBrokerSymbols()
    {
        return $this->broker_symbols;
    }

    /**
     * Map of broker symbols according to broker (ib, cqg, dtniq, etc.).
     *
     * Generated from protobuf field <code>map<string, string> broker_symbols = 14;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setBrokerSymbols($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->broker_symbols = $arr;

        return $this;
    }

}

