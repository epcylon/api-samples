<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stealth-api-v2.0.proto

namespace Stealth;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * SentimentUpdate represents a new sentiment subscription update. 
 *
 * Generated from protobuf message <code>stealth.SentimentUpdate</code>
 */
class SentimentUpdate extends \Google\Protobuf\Internal\Message
{
    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     */
    private $timestamp = 0;
    /**
     * Bar color spline component of sentiment gauge.
     *
     * Generated from protobuf field <code>.stealth.SentimentSpline lengths = 2;</code>
     */
    private $lengths = null;
    /**
     * Bar length component of sentiment gauge.
     *
     * Generated from protobuf field <code>.stealth.SentimentSpline colors = 3;</code>
     */
    private $colors = null;
    /**
     * Is the data that generated this potentially dirty (or stale)?
     *
     * Generated from protobuf field <code>bool is_dirty = 4;</code>
     */
    private $is_dirty = false;

    public function __construct() {
        \GPBMetadata\StealthApiV20::initOnce();
        parent::__construct();
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * Bar color spline component of sentiment gauge.
     *
     * Generated from protobuf field <code>.stealth.SentimentSpline lengths = 2;</code>
     * @return \Stealth\SentimentSpline
     */
    public function getLengths()
    {
        return $this->lengths;
    }

    /**
     * Bar color spline component of sentiment gauge.
     *
     * Generated from protobuf field <code>.stealth.SentimentSpline lengths = 2;</code>
     * @param \Stealth\SentimentSpline $var
     * @return $this
     */
    public function setLengths($var)
    {
        GPBUtil::checkMessage($var, \Stealth\SentimentSpline::class);
        $this->lengths = $var;

        return $this;
    }

    /**
     * Bar length component of sentiment gauge.
     *
     * Generated from protobuf field <code>.stealth.SentimentSpline colors = 3;</code>
     * @return \Stealth\SentimentSpline
     */
    public function getColors()
    {
        return $this->colors;
    }

    /**
     * Bar length component of sentiment gauge.
     *
     * Generated from protobuf field <code>.stealth.SentimentSpline colors = 3;</code>
     * @param \Stealth\SentimentSpline $var
     * @return $this
     */
    public function setColors($var)
    {
        GPBUtil::checkMessage($var, \Stealth\SentimentSpline::class);
        $this->colors = $var;

        return $this;
    }

    /**
     * Is the data that generated this potentially dirty (or stale)?
     *
     * Generated from protobuf field <code>bool is_dirty = 4;</code>
     * @return bool
     */
    public function getIsDirty()
    {
        return $this->is_dirty;
    }

    /**
     * Is the data that generated this potentially dirty (or stale)?
     *
     * Generated from protobuf field <code>bool is_dirty = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsDirty($var)
    {
        GPBUtil::checkBool($var);
        $this->is_dirty = $var;

        return $this;
    }

}

