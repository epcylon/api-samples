<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stealth-api-v2.0.proto

namespace Stealth;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * TriggerUpdate represents a new trigger subscription update. 
 * All prices (and gap size) are converted to long values.
 * Values should be converted to between -1 and 1 by subtracting 1001 and dividing by 1000. 
 *
 * Generated from protobuf message <code>stealth.TriggerUpdate</code>
 */
class TriggerUpdate extends \Google\Protobuf\Internal\Message
{
    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     */
    private $timestamp = 0;
    /**
     * The bias value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 bias = 2;</code>
     */
    private $bias = 0;
    /**
     * The perception value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 perception = 3;</code>
     */
    private $perception = 0;
    /**
     * Sentiment length value at point 0. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 sentiment = 4;</code>
     */
    private $sentiment = 0;
    /**
     * The commitment value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 commitment = 5;</code>
     */
    private $commitment = 0;
    /**
     * The equilibrium price.
     *
     * Generated from protobuf field <code>uint64 equilibrium_price = 6;</code>
     */
    private $equilibrium_price = 0;
    /**
     * The gap size of each equilibrium deviation.
     *
     * Generated from protobuf field <code>uint64 gap_size = 7;</code>
     */
    private $gap_size = 0;
    /**
     * Last traded price at time of calculation.
     *
     * Generated from protobuf field <code>uint64 last_price = 8;</code>
     */
    private $last_price = 0;
    /**
     * Is the data that generated this potentially dirty (or stale)?
     *
     * Generated from protobuf field <code>bool is_dirty = 9;</code>
     */
    private $is_dirty = false;

    public function __construct() {
        \GPBMetadata\StealthApiV20::initOnce();
        parent::__construct();
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * The timestamp of the latest update.
     *
     * Generated from protobuf field <code>uint64 timestamp = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * The bias value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 bias = 2;</code>
     * @return int
     */
    public function getBias()
    {
        return $this->bias;
    }

    /**
     * The bias value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 bias = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setBias($var)
    {
        GPBUtil::checkInt32($var);
        $this->bias = $var;

        return $this;
    }

    /**
     * The perception value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 perception = 3;</code>
     * @return int
     */
    public function getPerception()
    {
        return $this->perception;
    }

    /**
     * The perception value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 perception = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setPerception($var)
    {
        GPBUtil::checkInt32($var);
        $this->perception = $var;

        return $this;
    }

    /**
     * Sentiment length value at point 0. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 sentiment = 4;</code>
     * @return int
     */
    public function getSentiment()
    {
        return $this->sentiment;
    }

    /**
     * Sentiment length value at point 0. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 sentiment = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setSentiment($var)
    {
        GPBUtil::checkInt32($var);
        $this->sentiment = $var;

        return $this;
    }

    /**
     * The commitment value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 commitment = 5;</code>
     * @return int
     */
    public function getCommitment()
    {
        return $this->commitment;
    }

    /**
     * The commitment value. (-1000 to 1000)
     *
     * Generated from protobuf field <code>sint32 commitment = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setCommitment($var)
    {
        GPBUtil::checkInt32($var);
        $this->commitment = $var;

        return $this;
    }

    /**
     * The equilibrium price.
     *
     * Generated from protobuf field <code>uint64 equilibrium_price = 6;</code>
     * @return int|string
     */
    public function getEquilibriumPrice()
    {
        return $this->equilibrium_price;
    }

    /**
     * The equilibrium price.
     *
     * Generated from protobuf field <code>uint64 equilibrium_price = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setEquilibriumPrice($var)
    {
        GPBUtil::checkUint64($var);
        $this->equilibrium_price = $var;

        return $this;
    }

    /**
     * The gap size of each equilibrium deviation.
     *
     * Generated from protobuf field <code>uint64 gap_size = 7;</code>
     * @return int|string
     */
    public function getGapSize()
    {
        return $this->gap_size;
    }

    /**
     * The gap size of each equilibrium deviation.
     *
     * Generated from protobuf field <code>uint64 gap_size = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setGapSize($var)
    {
        GPBUtil::checkUint64($var);
        $this->gap_size = $var;

        return $this;
    }

    /**
     * Last traded price at time of calculation.
     *
     * Generated from protobuf field <code>uint64 last_price = 8;</code>
     * @return int|string
     */
    public function getLastPrice()
    {
        return $this->last_price;
    }

    /**
     * Last traded price at time of calculation.
     *
     * Generated from protobuf field <code>uint64 last_price = 8;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLastPrice($var)
    {
        GPBUtil::checkUint64($var);
        $this->last_price = $var;

        return $this;
    }

    /**
     * Is the data that generated this potentially dirty (or stale)?
     *
     * Generated from protobuf field <code>bool is_dirty = 9;</code>
     * @return bool
     */
    public function getIsDirty()
    {
        return $this->is_dirty;
    }

    /**
     * Is the data that generated this potentially dirty (or stale)?
     *
     * Generated from protobuf field <code>bool is_dirty = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsDirty($var)
    {
        GPBUtil::checkBool($var);
        $this->is_dirty = $var;

        return $this;
    }

}

