<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stomp_v0.1.proto

namespace Stomp;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This is the main response frame that will be received by the client. 
 * All responses are included within this frame. 
 *
 * Generated from protobuf message <code>stomp.ResponseFrame</code>
 */
class ResponseFrame extends \Google\Protobuf\Internal\Message
{
    protected $response;

    public function __construct() {
        \GPBMetadata\StompV01::initOnce();
        parent::__construct();
    }

    /**
     * Response to a connection attempt. Received when properly connected. 
     *
     * Generated from protobuf field <code>.stomp.ConnectedResponse connected = 1;</code>
     * @return \Stomp\ConnectedResponse
     */
    public function getConnected()
    {
        return $this->readOneof(1);
    }

    /**
     * Response to a connection attempt. Received when properly connected. 
     *
     * Generated from protobuf field <code>.stomp.ConnectedResponse connected = 1;</code>
     * @param \Stomp\ConnectedResponse $var
     * @return $this
     */
    public function setConnected($var)
    {
        GPBUtil::checkMessage($var, \Stomp\ConnectedResponse::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Holds a single message for a subcription, whether throttled or not.
     * If a subscription is not throttled, responses will always be in this
     * message. If a subscription is throttled, responses may be in this message
     * or in the batch messages. 
     *
     * Generated from protobuf field <code>.stomp.MessageResponse single_message = 2;</code>
     * @return \Stomp\MessageResponse
     */
    public function getSingleMessage()
    {
        return $this->readOneof(2);
    }

    /**
     * Holds a single message for a subcription, whether throttled or not.
     * If a subscription is not throttled, responses will always be in this
     * message. If a subscription is throttled, responses may be in this message
     * or in the batch messages. 
     *
     * Generated from protobuf field <code>.stomp.MessageResponse single_message = 2;</code>
     * @param \Stomp\MessageResponse $var
     * @return $this
     */
    public function setSingleMessage($var)
    {
        GPBUtil::checkMessage($var, \Stomp\MessageResponse::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Holds batched throttled messages for multiple subscriptions. Only throttled
     * subscriptions will send messages through this, but throttled messages may
     * still come in through the single message. 
     *
     * Generated from protobuf field <code>.stomp.MessageResponses batch_messages = 3;</code>
     * @return \Stomp\MessageResponses
     */
    public function getBatchMessages()
    {
        return $this->readOneof(3);
    }

    /**
     * Holds batched throttled messages for multiple subscriptions. Only throttled
     * subscriptions will send messages through this, but throttled messages may
     * still come in through the single message. 
     *
     * Generated from protobuf field <code>.stomp.MessageResponses batch_messages = 3;</code>
     * @param \Stomp\MessageResponses $var
     * @return $this
     */
    public function setBatchMessages($var)
    {
        GPBUtil::checkMessage($var, \Stomp\MessageResponses::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Receipt response for receiptable requests. 
     *
     * Generated from protobuf field <code>.stomp.ReceiptResponse receipt = 4;</code>
     * @return \Stomp\ReceiptResponse
     */
    public function getReceipt()
    {
        return $this->readOneof(4);
    }

    /**
     * Receipt response for receiptable requests. 
     *
     * Generated from protobuf field <code>.stomp.ReceiptResponse receipt = 4;</code>
     * @param \Stomp\ReceiptResponse $var
     * @return $this
     */
    public function setReceipt($var)
    {
        GPBUtil::checkMessage($var, \Stomp\ReceiptResponse::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Notifies a client of errors that occur at the server level. 
     *
     * Generated from protobuf field <code>.stomp.ServerErrorResponse server_error = 5;</code>
     * @return \Stomp\ServerErrorResponse
     */
    public function getServerError()
    {
        return $this->readOneof(5);
    }

    /**
     * Notifies a client of errors that occur at the server level. 
     *
     * Generated from protobuf field <code>.stomp.ServerErrorResponse server_error = 5;</code>
     * @param \Stomp\ServerErrorResponse $var
     * @return $this
     */
    public function setServerError($var)
    {
        GPBUtil::checkMessage($var, \Stomp\ServerErrorResponse::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Notifies a client of errors that occur for a specific subscription. 
     *
     * Generated from protobuf field <code>.stomp.SubscriptionErrorResponse subscription_error = 6;</code>
     * @return \Stomp\SubscriptionErrorResponse
     */
    public function getSubscriptionError()
    {
        return $this->readOneof(6);
    }

    /**
     * Notifies a client of errors that occur for a specific subscription. 
     *
     * Generated from protobuf field <code>.stomp.SubscriptionErrorResponse subscription_error = 6;</code>
     * @param \Stomp\SubscriptionErrorResponse $var
     * @return $this
     */
    public function setSubscriptionError($var)
    {
        GPBUtil::checkMessage($var, \Stomp\SubscriptionErrorResponse::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Heartbeat message. 
     *
     * Generated from protobuf field <code>.stomp.Heartbeat heartbeat = 7;</code>
     * @return \Stomp\Heartbeat
     */
    public function getHeartbeat()
    {
        return $this->readOneof(7);
    }

    /**
     * Heartbeat message. 
     *
     * Generated from protobuf field <code>.stomp.Heartbeat heartbeat = 7;</code>
     * @param \Stomp\Heartbeat $var
     * @return $this
     */
    public function setHeartbeat($var)
    {
        GPBUtil::checkMessage($var, \Stomp\Heartbeat::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getResponse()
    {
        return $this->whichOneof("response");
    }

}

