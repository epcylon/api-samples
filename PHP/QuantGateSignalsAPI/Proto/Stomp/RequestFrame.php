<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stomp_v0.1.proto

namespace Stomp;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This is the main request frame that will be received by the server. 
 * All requests must be made using this frame. 
 *
 * Generated from protobuf message <code>stomp.RequestFrame</code>
 */
class RequestFrame extends \Google\Protobuf\Internal\Message
{
    protected $request;

    public function __construct() {
        \GPBMetadata\StompV01::initOnce();
        parent::__construct();
    }

    /**
     * Used to connect to the server.
     *
     * Generated from protobuf field <code>.stomp.ConnectRequest connect = 1;</code>
     * @return \Stomp\ConnectRequest
     */
    public function getConnect()
    {
        return $this->readOneof(1);
    }

    /**
     * Used to connect to the server.
     *
     * Generated from protobuf field <code>.stomp.ConnectRequest connect = 1;</code>
     * @param \Stomp\ConnectRequest $var
     * @return $this
     */
    public function setConnect($var)
    {
        GPBUtil::checkMessage($var, \Stomp\ConnectRequest::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Sent immediately before disconnecting.
     *
     * Generated from protobuf field <code>.stomp.DisconnectRequest disconnect = 2;</code>
     * @return \Stomp\DisconnectRequest
     */
    public function getDisconnect()
    {
        return $this->readOneof(2);
    }

    /**
     * Sent immediately before disconnecting.
     *
     * Generated from protobuf field <code>.stomp.DisconnectRequest disconnect = 2;</code>
     * @param \Stomp\DisconnectRequest $var
     * @return $this
     */
    public function setDisconnect($var)
    {
        GPBUtil::checkMessage($var, \Stomp\DisconnectRequest::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Used to subscribe to a stream of events.
     *
     * Generated from protobuf field <code>.stomp.SubscribeRequest subscribe = 3;</code>
     * @return \Stomp\SubscribeRequest
     */
    public function getSubscribe()
    {
        return $this->readOneof(3);
    }

    /**
     * Used to subscribe to a stream of events.
     *
     * Generated from protobuf field <code>.stomp.SubscribeRequest subscribe = 3;</code>
     * @param \Stomp\SubscribeRequest $var
     * @return $this
     */
    public function setSubscribe($var)
    {
        GPBUtil::checkMessage($var, \Stomp\SubscribeRequest::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Used to unsubscribe from a stream of events.
     *
     * Generated from protobuf field <code>.stomp.UnsubscribeRequest unsubscribe = 4;</code>
     * @return \Stomp\UnsubscribeRequest
     */
    public function getUnsubscribe()
    {
        return $this->readOneof(4);
    }

    /**
     * Used to unsubscribe from a stream of events.
     *
     * Generated from protobuf field <code>.stomp.UnsubscribeRequest unsubscribe = 4;</code>
     * @param \Stomp\UnsubscribeRequest $var
     * @return $this
     */
    public function setUnsubscribe($var)
    {
        GPBUtil::checkMessage($var, \Stomp\UnsubscribeRequest::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Changes the throttle rate of an existing subscription.
     *
     * Generated from protobuf field <code>.stomp.ThrottleRequest throttle = 5;</code>
     * @return \Stomp\ThrottleRequest
     */
    public function getThrottle()
    {
        return $this->readOneof(5);
    }

    /**
     * Changes the throttle rate of an existing subscription.
     *
     * Generated from protobuf field <code>.stomp.ThrottleRequest throttle = 5;</code>
     * @param \Stomp\ThrottleRequest $var
     * @return $this
     */
    public function setThrottle($var)
    {
        GPBUtil::checkMessage($var, \Stomp\ThrottleRequest::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Used to send single updates or commands to the server.
     *
     * Generated from protobuf field <code>.stomp.SendRequest send = 6;</code>
     * @return \Stomp\SendRequest
     */
    public function getSend()
    {
        return $this->readOneof(6);
    }

    /**
     * Used to send single updates or commands to the server.
     *
     * Generated from protobuf field <code>.stomp.SendRequest send = 6;</code>
     * @param \Stomp\SendRequest $var
     * @return $this
     */
    public function setSend($var)
    {
        GPBUtil::checkMessage($var, \Stomp\SendRequest::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Heartbeat message for keep-alive purposes.
     *
     * Generated from protobuf field <code>.stomp.Heartbeat heartbeat = 7;</code>
     * @return \Stomp\Heartbeat
     */
    public function getHeartbeat()
    {
        return $this->readOneof(7);
    }

    /**
     * Heartbeat message for keep-alive purposes.
     *
     * Generated from protobuf field <code>.stomp.Heartbeat heartbeat = 7;</code>
     * @param \Stomp\Heartbeat $var
     * @return $this
     */
    public function setHeartbeat($var)
    {
        GPBUtil::checkMessage($var, \Stomp\Heartbeat::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getRequest()
    {
        return $this->whichOneof("request");
    }

}

